---
---

<div>
    <div>
        <div id="drop-region" class="bg-slate-200 dark:bg-teal-800">
            <div class="drop-message">
                Drag & Drop images or click to upload
            </div>
            <div id="image-preview"></div>
        </div>
        <div id="style-region"></div>
    </div>
    <div>
        <div id="cropper-container">
            <img id="cropper-image" src="" alt="Crop Image" />
        </div>
        <button id="crop-button" disabled></button>
    </div>

    <div></div>
</div>

<style>
    #drop-region {
        border-radius: 20px;
        box-shadow: 0 0 35px rgba(0, 0, 0, 0.05);
        width: 400px;
        padding: 60px 40px;
        text-align: center;
        cursor: pointer;
        transition: 0.3s;
    }
    #drop-region:hover {
        box-shadow: 0 0 45px rgba(0, 0, 0, 0.1);
    }

    #image-preview {
        margin-top: 20px;
    }
    #image-preview .image-view {
        display: inline-block;
        position: relative;
        margin-right: 13px;
        margin-bottom: 13px;
    }
    #image-preview .image-view img {
        max-width: 100px;
        max-height: 100px;
    }
    #image-preview .overlay {
        position: absolute;
        width: 100%;
        height: 100%;
        top: 0;
        right: 0;
        z-index: 2;
        background: rgba(255, 255, 255, 0.5);
    }
</style>

<script>
    import Cropper from "cropperjs";
    import { girls } from "pridify";
    let imageData: File | undefined = undefined;
    
    async function buildimage(flag: string, type: string): Promise<Blob|undefined> {
        if (imageData) {
        let pfp_bytes = new Uint8Array(await imageData.arrayBuffer());
        let file = girls(pfp_bytes, flag);
        let blob = new Blob([file], {type: type});
        return blob;
        }
        return undefined;
    }

    let // where files are dropped + file selector is opened
        dropRegion = document.getElementById("drop-region"),
        // where images are previewed
        imagePreviewRegion = document.getElementById("image-preview"),
        //preview button
        cropButton = document.getElementById("crop-button");
    // open file selector when clicked on the drop region
    let fakeInput = document.createElement("input");
    fakeInput.type = "file";
    fakeInput.accept = "image/*";
    fakeInput.multiple = true;
    dropRegion?.addEventListener("click", function () {
        fakeInput.click();
    });

    fakeInput.addEventListener("change", function () {
        let files = fakeInput.files;
        handleFiles(files!);
    });

    function preventDefault(e: Event) {
        e.preventDefault();
        e.stopPropagation();
    }

    dropRegion?.addEventListener("dragenter", preventDefault, false);
    dropRegion?.addEventListener("dragleave", preventDefault, false);
    dropRegion?.addEventListener("dragover", preventDefault, false);
    dropRegion?.addEventListener("drop", preventDefault, false);

    function handleDrop(e: DragEvent) {
        let dt = e.dataTransfer,
            files = dt?.files;

        handleFiles(files!);
    }

    dropRegion?.addEventListener("drop", handleDrop, false);

    function handleFiles(files: FileList) {
        if (files.length > 0) {
            let image = files[0] as File;
            if (validateImage(image)) {
                previewAnduploadImage(image);
            }
        }
    }

    function validateImage(image: File) {
        // check the type
        let validTypes = ["image/jpeg", "image/png", "image/gif"];
        if (validTypes.indexOf(image.type) === -1) {
            alert("Invalid File Type");
            return false;
        }

        // check the size
        let maxSizeInBytes = 10e6; // 10MB
        if (image.size > maxSizeInBytes) {
            alert("File too large");
            return false;
        }

        return true;
    }

    function previewAnduploadImage(image: File) {
        if (imagePreviewRegion?.hasChildNodes()) {
            imagePreviewRegion.removeChild(imagePreviewRegion.firstChild!);
        }

        // container
        let imgView = document.createElement("div");
        imgView.className = "image-view";
        imagePreviewRegion?.appendChild(imgView);

        // previewing image
        let img = document.createElement("img");
        imgView.appendChild(img);

        // progress overlay
        let overlay = document.createElement("div");
        overlay.className = "overlay";
        imgView.appendChild(overlay);

        // read the image...
        let reader = new FileReader();
        reader.onload = function (e) {
            img.src = e.target?.result as string;

            // Initialize the cropper
            var cropper = new Cropper(img, {
                aspectRatio: NaN, // Set the aspect ratio based on your requirements
                viewMode: 1, // Set the cropping mode (0, 1, 2, 3)
                minCropBoxWidth: 300, // Set the minimum width of the crop box
                minCropBoxHeight: 300, // Set the minimum height of the crop box
                maxCropBoxWidth: 400, // Set the maximum width of the crop box
                maxCropBoxHeight: 400, // Set the maximum height of the crop box
                ready: function () {
                    // Enable the crop button once the cropper is ready
                    cropButton?.removeAttribute("disabled");
                },
            });

            // Save the cropper instance for later use
            img.dataset.cropper = JSON.stringify(cropper);
        };
        reader.readAsDataURL(image);

        // create FormData
        imageData = image;
    }
    cropButton?.addEventListener("click", function () {
        // Get the cropped image data
        var img = document.getElementById("cropper-image") as HTMLImageElement;
        var cropper = JSON.parse(img.dataset.cropper as string);
        var croppedImageData = cropper
            .getCroppedCanvas()
            .toDataURL("image/png");

        // Do something with the cropped image data, like uploading it to a server

        // Example: Open the cropped image in a new window
        var croppedImage = window.open();
        croppedImage?.document.write('<img src="' + croppedImageData + '">');
    });
</script>
